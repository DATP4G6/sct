species Output(int i) {

    decorator Print {
        print(Output::?());
    }

    @Print
    state Other { destroy; }

    @Print
    state Fizz { destroy; }

    @Print
    state Buzz { destroy; }

    @Print
    state FizzBuzz { destroy; }
}

species Manager(int startCount) {

    function countMod(int i) -> int {
        return startCount % i == 0;
    }

    decorator Increment {
        startCount = startCount + 1;
    }

    @Increment
    state Managing {
        if (countMod(3)) {
            if (countMod(5)) {
                create Output::FizzBuzz(i : startCount);
            } else {
                create Output::Fizz(i : startCount);
            }
        } else if (countMod(5)) {
            create Output::Buzz(i : startCount);
        } else {
            create Output::Other(i : startCount);
        }
        enter Managing;
    }
}

function setup() -> void {
    create Manager::Managing(startCount: 0);
    seed(7);
    int terminateAfter = (int)(rand() * 6 * 10);
    ExitAfterTicks(terminateAfter);
}
