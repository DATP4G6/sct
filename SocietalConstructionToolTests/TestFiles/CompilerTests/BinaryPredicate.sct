// Add behavour which tests if stuff is equal
class Foo(int a, int b) {
    state Bar {
        enter End;
    }

    state Baz {
        enter End;
    }

    state End {
        exit;
    }
}

class Output() {
    state Equal { enter Equal; }
    state Unequal { enter Equal; }
}

function Setup() -> void {
    // Arrange
    Predicate fullEqual = Foo::Bar(a: 1, b: 2);
    Predicate fullEqual2 = Foo::Bar(a: 1, b: 2);
    Predicate fullDifferent = Foo::Bar(a: 2, b: 3);

    Predicate partialEqual = Foo::Bar(a: 1);
    Predicate partialEqual2 = Foo::Bar(a: 1);
    Predicate partialDifferent = Foo::Bar(a: 2);

    Predicate wildcardEqual = Foo::?(a: 1, b: 2);
    Predicate wildcardEqual2 = Foo::?(a: 1, b: 2);
    Predicate wildcardDifferent = Foo::?(a: 2, b: 3);

    // Assert
    int equal = fullEqual == fullEqual2;

    if (equal) {
        create Output::Equal();
    } else {
        create Output::Unequal();
    }

    equal = partialEqual == partialEqual2;

    if (equal) {
        create Output::Equal();
    } else {
        create Output::Unequal();
    }

    equal = wildcardEqual == wildcardEqual2;

    if (equal) {
        create Output::Equal();
    } else {
        create Output::Unequal();
    }

    int unequal = fullEqual == fullDifferent;

    if (!unequal) {
        create Output::Equal();
    } else {
        create Output::Unequal();
    }

    unequal = partialEqual == partialDifferent;

    if (!unequal) {
        create Output::Equal();
    } else {
        create Output::Unequal();
    }

    unequal = wildcardEqual == wildcardDifferent;

    if (!unequal) {
        create Output::Equal();
    } else {
        create Output::Unequal();
    }
}
