(start (class_def class Citizen ( (args_def (type int) townId) ) { (class_body (state state Child { (statement_list (statement (enter enter Adult ;))) }) (state state Adult { (statement_list (statement (enter enter Adult ;))) })) }) (function function duplicate ( (args_def (type Predicate) p) ) -> (type int) { (statement_list (statement (if if ( (expression (expression (call_expression count ( (args_call (expression p)) ))) > (expression (literal 1))) ) { (statement_list (statement (return return (expression (literal 1)) ;))) })) (statement (return return (expression (literal 0)) ;))) }) (function function Setup ( args_def ) -> (type void) { (statement_list (statement (declaration (type Predicate) x = (expression (agent_predicate Citizen :: Child ( (args_agent townId : (expression (literal 1))) ))) ;)) (statement (if if ( (expression (call_expression duplicate ( (args_call (expression x)) ))) ) { (statement_list (statement (exit exit ( ) ;))) }))) }) <EOF>)