(start (species_def species Foo ( (args_def (type int) a , (type int) b) ) { (species_body (state state Bar { (statement_list (statement (enter enter End ;))) }) (state state Baz { (statement_list (statement (enter enter End ;))) }) (state state End { (statement_list (statement (exit exit ;))) })) }) (species_def species Output ( args_def ) { (species_body (state state Equal { (statement_list (statement (enter enter Equal ;))) }) (state state Unequal { (statement_list (statement (enter enter Equal ;))) })) }) (function function Setup ( args_def ) -> (type void) { (statement_list (statement (declaration (type Predicate) fullEqual = (expression (agent_predicate Foo :: Bar ( (args_agent a : (expression (literal 1)) , b : (expression (literal 2))) ))) ;)) (statement (declaration (type Predicate) fullEqual2 = (expression (agent_predicate Foo :: Bar ( (args_agent a : (expression (literal 1)) , b : (expression (literal 2))) ))) ;)) (statement (declaration (type Predicate) fullDifferent = (expression (agent_predicate Foo :: Bar ( (args_agent a : (expression (literal 2)) , b : (expression (literal 3))) ))) ;)) (statement (declaration (type Predicate) partialEqual = (expression (agent_predicate Foo :: Bar ( (args_agent a : (expression (literal 1))) ))) ;)) (statement (declaration (type Predicate) partialEqual2 = (expression (agent_predicate Foo :: Bar ( (args_agent a : (expression (literal 1))) ))) ;)) (statement (declaration (type Predicate) partialDifferent = (expression (agent_predicate Foo :: Bar ( (args_agent a : (expression (literal 2))) ))) ;)) (statement (declaration (type Predicate) wildcardEqual = (expression (agent_predicate Foo :: ? ( (args_agent a : (expression (literal 1)) , b : (expression (literal 2))) ))) ;)) (statement (declaration (type Predicate) wildcardEqual2 = (expression (agent_predicate Foo :: ? ( (args_agent a : (expression (literal 1)) , b : (expression (literal 2))) ))) ;)) (statement (declaration (type Predicate) wildcardDifferent = (expression (agent_predicate Foo :: ? ( (args_agent a : (expression (literal 2)) , b : (expression (literal 3))) ))) ;)) (statement (declaration (type int) equal = (expression (expression fullEqual) == (expression fullEqual2)) ;)) (statement (if if ( (expression equal) ) { (statement_list (statement (create create (agent_create Output :: Equal ( args_agent )) ;))) } (else else { (statement_list (statement (create create (agent_create Output :: Unequal ( args_agent )) ;))) }))) (statement (assignment equal = (expression (expression partialEqual) == (expression partialEqual2)) ;)) (statement (if if ( (expression equal) ) { (statement_list (statement (create create (agent_create Output :: Equal ( args_agent )) ;))) } (else else { (statement_list (statement (create create (agent_create Output :: Unequal ( args_agent )) ;))) }))) (statement (assignment equal = (expression (expression wildcardEqual) == (expression wildcardEqual2)) ;)) (statement (if if ( (expression equal) ) { (statement_list (statement (create create (agent_create Output :: Equal ( args_agent )) ;))) } (else else { (statement_list (statement (create create (agent_create Output :: Unequal ( args_agent )) ;))) }))) (statement (declaration (type int) unequal = (expression (expression fullEqual) == (expression fullDifferent)) ;)) (statement (if if ( (expression ! (expression unequal)) ) { (statement_list (statement (create create (agent_create Output :: Equal ( args_agent )) ;))) } (else else { (statement_list (statement (create create (agent_create Output :: Unequal ( args_agent )) ;))) }))) (statement (assignment unequal = (expression (expression partialEqual) == (expression partialDifferent)) ;)) (statement (if if ( (expression ! (expression unequal)) ) { (statement_list (statement (create create (agent_create Output :: Equal ( args_agent )) ;))) } (else else { (statement_list (statement (create create (agent_create Output :: Unequal ( args_agent )) ;))) }))) (statement (assignment unequal = (expression (expression wildcardEqual) == (expression wildcardDifferent)) ;)) (statement (if if ( (expression ! (expression unequal)) ) { (statement_list (statement (create create (agent_create Output :: Equal ( args_agent )) ;))) } (else else { (statement_list (statement (create create (agent_create Output :: Unequal ( args_agent )) ;))) })))) }) <EOF>)