namespace SctGenerated
{
    using Sct.Runtime;
    using System;
    using System.Collections.Generic;

    public class GlobalClass
    {
        public static void __sct_setup(IRuntimeContext ctx)
        {
            ctx.AgentHandler.CreateAgent(new __sct_Town("__sct_Growing", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { new KeyValuePair<String, dynamic>("__sct_id", 1L), new KeyValuePair<String, dynamic>("__sct_space", 50L) })));
        }

        public static void __sct_exitAfterTicks(IRuntimeContext ctx, long __sct_ticks)
        {
            ctx.AgentHandler.CreateAgent(new __sct_stdCounter("__sct_Counting", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { new KeyValuePair<String, dynamic>("__sct_x", __sct_ticks) })));
        }

        public static void __sct_exitWhenExists(IRuntimeContext ctx, QueryPredicate __sct_pred)
        {
            ctx.AgentHandler.CreateAgent(new __sct_stdPredicateExists("__sct_ExitWhen", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { new KeyValuePair<String, dynamic>("__sct_p", __sct_pred) })));
        }

        public static void __sct_exitWhenNoLongerExists(IRuntimeContext ctx, QueryPredicate __sct_pred)
        {
            ctx.AgentHandler.CreateAgent(new __sct_stdPredicateExists("__sct_ExitWhenNo", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { new KeyValuePair<String, dynamic>("__sct_p", __sct_pred) })));
        }

        public static void __sct_exitWhenEqual(IRuntimeContext ctx, QueryPredicate __sct_pred, long __sct_amount)
        {
            ctx.AgentHandler.CreateAgent(new __sct_stdPredicateAmount("__sct_ExitEqual", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { new KeyValuePair<String, dynamic>("__sct_p", __sct_pred), new KeyValuePair<String, dynamic>("__sct_x", __sct_amount) })));
        }

        public static void __sct_exitWhenMoreThan(IRuntimeContext ctx, QueryPredicate __sct_pred, long __sct_amount)
        {
            ctx.AgentHandler.CreateAgent(new __sct_stdPredicateAmount("__sct_ExitMoreThan", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { new KeyValuePair<String, dynamic>("__sct_p", __sct_pred), new KeyValuePair<String, dynamic>("__sct_x", __sct_amount) })));
        }

        public static void __sct_exitWhenLessThan(IRuntimeContext ctx, QueryPredicate __sct_pred, long __sct_amount)
        {
            ctx.AgentHandler.CreateAgent(new __sct_stdPredicateAmount("__sct_ExitLessThan", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { new KeyValuePair<String, dynamic>("__sct_p", __sct_pred), new KeyValuePair<String, dynamic>("__sct_x", __sct_amount) })));
        }

        public static void __sct_exitWhenPredicatesEqual(IRuntimeContext ctx, QueryPredicate __sct_a, QueryPredicate __sct_b)
        {
            ctx.AgentHandler.CreateAgent(new __sct_stdPredicatePredicate("__sct_ExitEqual", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { new KeyValuePair<String, dynamic>("__sct_a", __sct_a), new KeyValuePair<String, dynamic>("__sct_b", __sct_b) })));
        }

        public static void __sct_exitWhenPredicatesMoreThan(IRuntimeContext ctx, QueryPredicate __sct_a, QueryPredicate __sct_b)
        {
            ctx.AgentHandler.CreateAgent(new __sct_stdPredicatePredicate("__sct_ExitMoreThan", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { new KeyValuePair<String, dynamic>("__sct_a", __sct_a), new KeyValuePair<String, dynamic>("__sct_b", __sct_b) })));
        }

        public static void __sct_exitWhenPredicatesLessThan(IRuntimeContext ctx, QueryPredicate __sct_a, QueryPredicate __sct_b)
        {
            ctx.AgentHandler.CreateAgent(new __sct_stdPredicatePredicate("__sct_ExitLessThan", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { new KeyValuePair<String, dynamic>("__sct_a", __sct_a), new KeyValuePair<String, dynamic>("__sct_b", __sct_b) })));
        }

        public class __sct_Town : BaseAgent
        {
            private long __sct_id { get => Fields["__sct_id"]; set => Fields["__sct_id"] = value; }
            private long __sct_space { get => Fields["__sct_space"]; set => Fields["__sct_space"] = value; }

            public __sct_Town(String state, IDictionary<String, dynamic> fields) : base(state, fields)
            {
            }

            private bool __sct_Growing(IRuntimeContext ctx)
            {
                if ((1L) != 0L)
                {
                    {
                        Enter(ctx, "__sct_End");
                        return true;
                    }
                }

                {
                    Enter(ctx, "__sct_Growing");
                    return true;
                }

                return false;
            }

            private bool __sct_End(IRuntimeContext ctx)
            {
                {
                    ctx.ExitRuntime();
                    return true;
                }

                return false;
            }

            public override void Update(IRuntimeContext ctx)
            {
                _ = State switch
                {
                    "__sct_Growing" => __sct_Growing(ctx),
                    "__sct_End" => __sct_End(ctx)};
            }
        }

        public class __sct_stdCounter : BaseAgent
        {
            private long __sct_x { get => Fields["__sct_x"]; set => Fields["__sct_x"] = value; }

            public __sct_stdCounter(String state, IDictionary<String, dynamic> fields) : base(state, fields)
            {
            }

            private bool __sct_Counting(IRuntimeContext ctx)
            {
                if ((((__sct_x <= 0L) ? 1L : 0L)) != 0L)
                {
                    {
                        ctx.ExitRuntime();
                        return true;
                    }
                }

                __sct_x = (__sct_x - 1L);
                {
                    Enter(ctx, "__sct_Counting");
                    return true;
                }

                return false;
            }

            public override void Update(IRuntimeContext ctx)
            {
                _ = State switch
                {
                    "__sct_Counting" => __sct_Counting(ctx)};
            }
        }

        public class __sct_stdPredicateExists : BaseAgent
        {
            private QueryPredicate __sct_p { get => Fields["__sct_p"]; set => Fields["__sct_p"] = value; }

            public __sct_stdPredicateExists(String state, IDictionary<String, dynamic> fields) : base(state, fields)
            {
            }

            private bool __sct_ExitWhen(IRuntimeContext ctx)
            {
                if ((ctx.QueryHandler.Exists(ctx, __sct_p)) != 0L)
                {
                    {
                        ctx.ExitRuntime();
                        return true;
                    }
                }

                {
                    Enter(ctx, "__sct_ExitWhen");
                    return true;
                }

                return false;
            }

            private bool __sct_ExitWhenNo(IRuntimeContext ctx)
            {
                if ((ctx.QueryHandler.Exists(ctx, __sct_p) == 0L ? 1L : 0L) != 0L)
                {
                    {
                        ctx.ExitRuntime();
                        return true;
                    }
                }

                {
                    Enter(ctx, "__sct_ExitWhenNo");
                    return true;
                }

                return false;
            }

            public override void Update(IRuntimeContext ctx)
            {
                _ = State switch
                {
                    "__sct_ExitWhen" => __sct_ExitWhen(ctx),
                    "__sct_ExitWhenNo" => __sct_ExitWhenNo(ctx)};
            }
        }

        public class __sct_stdPredicateAmount : BaseAgent
        {
            private QueryPredicate __sct_p { get => Fields["__sct_p"]; set => Fields["__sct_p"] = value; }
            private long __sct_x { get => Fields["__sct_x"]; set => Fields["__sct_x"] = value; }

            public __sct_stdPredicateAmount(String state, IDictionary<String, dynamic> fields) : base(state, fields)
            {
            }

            private bool __sct_ExitEqual(IRuntimeContext ctx)
            {
                if ((((ctx.QueryHandler.Count(ctx, __sct_p) == __sct_x) ? 1L : 0L)) != 0L)
                {
                    {
                        ctx.ExitRuntime();
                        return true;
                    }
                }

                {
                    Enter(ctx, "__sct_ExitEqual");
                    return true;
                }

                return false;
            }

            private bool __sct_ExitLessThan(IRuntimeContext ctx)
            {
                if ((((ctx.QueryHandler.Count(ctx, __sct_p) < __sct_x) ? 1L : 0L)) != 0L)
                {
                    {
                        ctx.ExitRuntime();
                        return true;
                    }
                }

                {
                    Enter(ctx, "__sct_ExitLessThan");
                    return true;
                }

                return false;
            }

            private bool __sct_ExitMoreThan(IRuntimeContext ctx)
            {
                if ((((ctx.QueryHandler.Count(ctx, __sct_p) > __sct_x) ? 1L : 0L)) != 0L)
                {
                    {
                        ctx.ExitRuntime();
                        return true;
                    }
                }

                {
                    Enter(ctx, "__sct_ExitMoreThan");
                    return true;
                }

                return false;
            }

            public override void Update(IRuntimeContext ctx)
            {
                _ = State switch
                {
                    "__sct_ExitEqual" => __sct_ExitEqual(ctx),
                    "__sct_ExitLessThan" => __sct_ExitLessThan(ctx),
                    "__sct_ExitMoreThan" => __sct_ExitMoreThan(ctx)};
            }
        }

        public class __sct_stdPredicatePredicate : BaseAgent
        {
            private QueryPredicate __sct_a { get => Fields["__sct_a"]; set => Fields["__sct_a"] = value; }
            private QueryPredicate __sct_b { get => Fields["__sct_b"]; set => Fields["__sct_b"] = value; }

            public __sct_stdPredicatePredicate(String state, IDictionary<String, dynamic> fields) : base(state, fields)
            {
            }

            private bool __sct_ExitEqual(IRuntimeContext ctx)
            {
                if ((((ctx.QueryHandler.Count(ctx, __sct_a) == ctx.QueryHandler.Count(ctx, __sct_b)) ? 1L : 0L)) != 0L)
                {
                    {
                        ctx.ExitRuntime();
                        return true;
                    }
                }

                {
                    Enter(ctx, "__sct_ExitEqual");
                    return true;
                }

                return false;
            }

            private bool __sct_ExitLessThan(IRuntimeContext ctx)
            {
                if ((((ctx.QueryHandler.Count(ctx, __sct_a) < ctx.QueryHandler.Count(ctx, __sct_b)) ? 1L : 0L)) != 0L)
                {
                    {
                        ctx.ExitRuntime();
                        return true;
                    }
                }

                {
                    Enter(ctx, "__sct_ExitLessThan");
                    return true;
                }

                return false;
            }

            private bool __sct_ExitMoreThan(IRuntimeContext ctx)
            {
                if ((((ctx.QueryHandler.Count(ctx, __sct_a) > ctx.QueryHandler.Count(ctx, __sct_b)) ? 1L : 0L)) != 0L)
                {
                    {
                        ctx.ExitRuntime();
                        return true;
                    }
                }

                {
                    Enter(ctx, "__sct_ExitMoreThan");
                    return true;
                }

                return false;
            }

            public override void Update(IRuntimeContext ctx)
            {
                _ = State switch
                {
                    "__sct_ExitEqual" => __sct_ExitEqual(ctx),
                    "__sct_ExitLessThan" => __sct_ExitLessThan(ctx),
                    "__sct_ExitMoreThan" => __sct_ExitMoreThan(ctx)};
            }
        }

        public static void RunSimulation(IRuntimeContext ctx)
        {
            Runtime runtime = new Runtime();
            __sct_setup(ctx);
            runtime.Run(ctx);
        }
    }
}