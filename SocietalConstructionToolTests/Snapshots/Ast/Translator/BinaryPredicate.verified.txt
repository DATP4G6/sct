namespace SctGenerated
{
    using Sct.Runtime;
    using System;
    using System.Collections.Generic;

    public class GlobalClass
    {
        public static void __sct_Setup(IRuntimeContext ctx)
        {
            IQueryPredicate __sct_fullEqual = new QueryPredicate("__sct_Foo", "__sct_Bar", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { new KeyValuePair<String, dynamic>("__sct_a", 1L), new KeyValuePair<String, dynamic>("__sct_b", 2L) }));
            IQueryPredicate __sct_fullEqual2 = new QueryPredicate("__sct_Foo", "__sct_Bar", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { new KeyValuePair<String, dynamic>("__sct_a", 1L), new KeyValuePair<String, dynamic>("__sct_b", 2L) }));
            IQueryPredicate __sct_fullDifferent = new QueryPredicate("__sct_Foo", "__sct_Bar", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { new KeyValuePair<String, dynamic>("__sct_a", 2L), new KeyValuePair<String, dynamic>("__sct_b", 3L) }));
            IQueryPredicate __sct_partialEqual = new QueryPredicate("__sct_Foo", "__sct_Bar", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { new KeyValuePair<String, dynamic>("__sct_a", 1L) }));
            IQueryPredicate __sct_partialEqual2 = new QueryPredicate("__sct_Foo", "__sct_Bar", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { new KeyValuePair<String, dynamic>("__sct_a", 1L) }));
            IQueryPredicate __sct_partialDifferent = new QueryPredicate("__sct_Foo", "__sct_Bar", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { new KeyValuePair<String, dynamic>("__sct_a", 2L) }));
            IQueryPredicate __sct_wildcardEqual = new QueryPredicate("__sct_Foo", null, new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { new KeyValuePair<String, dynamic>("__sct_a", 1L), new KeyValuePair<String, dynamic>("__sct_b", 2L) }));
            IQueryPredicate __sct_wildcardEqual2 = new QueryPredicate("__sct_Foo", null, new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { new KeyValuePair<String, dynamic>("__sct_a", 1L), new KeyValuePair<String, dynamic>("__sct_b", 2L) }));
            IQueryPredicate __sct_wildcardDifferent = new QueryPredicate("__sct_Foo", null, new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { new KeyValuePair<String, dynamic>("__sct_a", 2L), new KeyValuePair<String, dynamic>("__sct_b", 3L) }));
            long __sct_equal = ((__sct_fullEqual == __sct_fullEqual2) ? 1L : 0L);
            if ((__sct_equal) != 0L)
            {
                ctx.AgentHandler.CreateAgent(new __sct_Output("__sct_Equal", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { })));
            }
            else
            {
                ctx.AgentHandler.CreateAgent(new __sct_Output("__sct_Unequal", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { })));
            }

            __sct_equal = ((__sct_partialEqual == __sct_partialEqual2) ? 1L : 0L);
            if ((__sct_equal) != 0L)
            {
                ctx.AgentHandler.CreateAgent(new __sct_Output("__sct_Equal", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { })));
            }
            else
            {
                ctx.AgentHandler.CreateAgent(new __sct_Output("__sct_Unequal", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { })));
            }

            __sct_equal = ((__sct_wildcardEqual == __sct_wildcardEqual2) ? 1L : 0L);
            if ((__sct_equal) != 0L)
            {
                ctx.AgentHandler.CreateAgent(new __sct_Output("__sct_Equal", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { })));
            }
            else
            {
                ctx.AgentHandler.CreateAgent(new __sct_Output("__sct_Unequal", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { })));
            }

            long __sct_unequal = ((__sct_fullEqual == __sct_fullDifferent) ? 1L : 0L);
            if ((__sct_unequal == 0L ? 1L : 0L) != 0L)
            {
                ctx.AgentHandler.CreateAgent(new __sct_Output("__sct_Equal", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { })));
            }
            else
            {
                ctx.AgentHandler.CreateAgent(new __sct_Output("__sct_Unequal", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { })));
            }

            __sct_unequal = ((__sct_partialEqual == __sct_partialDifferent) ? 1L : 0L);
            if ((__sct_unequal == 0L ? 1L : 0L) != 0L)
            {
                ctx.AgentHandler.CreateAgent(new __sct_Output("__sct_Equal", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { })));
            }
            else
            {
                ctx.AgentHandler.CreateAgent(new __sct_Output("__sct_Unequal", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { })));
            }

            __sct_unequal = ((__sct_wildcardEqual == __sct_wildcardDifferent) ? 1L : 0L);
            if ((__sct_unequal == 0L ? 1L : 0L) != 0L)
            {
                ctx.AgentHandler.CreateAgent(new __sct_Output("__sct_Equal", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { })));
            }
            else
            {
                ctx.AgentHandler.CreateAgent(new __sct_Output("__sct_Unequal", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { })));
            }
        }

        public class __sct_Foo : BaseAgent
        {
            private long __sct_a { get => Fields["__sct_a"]; set => Fields["__sct_a"] = value; }
            private long __sct_b { get => Fields["__sct_b"]; set => Fields["__sct_b"] = value; }

            public __sct_Foo(String state, IDictionary<String, dynamic> fields) : base(state, fields)
            {
            }

            private bool __sct_Bar(IRuntimeContext ctx)
            {
                {
                    Enter(ctx, "__sct_End");
                    return true;
                }

                return false;
            }

            private bool __sct_Baz(IRuntimeContext ctx)
            {
                {
                    Enter(ctx, "__sct_End");
                    return true;
                }

                return false;
            }

            private bool __sct_End(IRuntimeContext ctx)
            {
                {
                    ctx.ExitRuntime();
                    return true;
                }

                return false;
            }

            public override void Update(IRuntimeContext ctx)
            {
                _ = State switch
                {
                    "__sct_Bar" => __sct_Bar(ctx),
                    "__sct_Baz" => __sct_Baz(ctx),
                    "__sct_End" => __sct_End(ctx)};
            }
        }

        public class __sct_Output : BaseAgent
        {
            public __sct_Output(String state, IDictionary<String, dynamic> fields) : base(state, fields)
            {
            }

            private bool __sct_Equal(IRuntimeContext ctx)
            {
                {
                    Enter(ctx, "__sct_Equal");
                    return true;
                }

                return false;
            }

            private bool __sct_Unequal(IRuntimeContext ctx)
            {
                {
                    Enter(ctx, "__sct_Equal");
                    return true;
                }

                return false;
            }

            public override void Update(IRuntimeContext ctx)
            {
                _ = State switch
                {
                    "__sct_Equal" => __sct_Equal(ctx),
                    "__sct_Unequal" => __sct_Unequal(ctx)};
            }
        }

        public static void RunSimulation(IRuntimeContext ctx)
        {
            Runtime runtime = new Runtime();
            __sct_Setup(ctx);
            runtime.Run(ctx);
        }
    }
}