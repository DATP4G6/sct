{
  Functions: {
    $type: IEnumerable<SctFunctionSyntax>,
    $values: [
      {
        Id: duplicate,
        Parameters: {
          $type: IEnumerable<SctParameterSyntax>,
          $values: [
            {
              Type: {
                Type: Predicate
              },
              Id: p
            }
          ]
        },
        ReturnType: {
          Type: Int
        },
        Block: {
          Statements: {
            $type: IEnumerable<SctStatementSyntax>,
            $values: [
              {
                $type: SctIfStatementSyntax,
                Expression: {
                  $type: SctBooleanExpressionSyntax,
                  Left: {
                    $type: SctCallExpressionSyntax,
                    Target: count,
                    Expressions: {
                      $type: IEnumerable<SctExpressionSyntax>,
                      $values: [
                        {
                          $type: SctIdExpressionSyntax,
                          Id: p
                        }
                      ]
                    }
                  },
                  Right: {
                    $type: SctLiteralExpressionSyntax<long>,
                    Value: 1,
                    Type: Int
                  },
                  Op: Gt
                },
                Then: {
                  Statements: {
                    $type: IEnumerable<SctStatementSyntax>,
                    $values: [
                      {
                        $type: SctReturnStatementSyntax,
                        Expression: {
                          $type: SctLiteralExpressionSyntax<long>,
                          Value: 1,
                          Type: Int
                        }
                      }
                    ]
                  }
                },
                Else: null
              },
              {
                $type: SctReturnStatementSyntax,
                Expression: {
                  $type: SctLiteralExpressionSyntax<long>,
                  Value: 0,
                  Type: Int
                }
              }
            ]
          }
        }
      },
      {
        Id: Setup,
        Parameters: {
          $type: IEnumerable<SctParameterSyntax>,
          $values: []
        },
        ReturnType: {
          Type: Void
        },
        Block: {
          Statements: {
            $type: IEnumerable<SctStatementSyntax>,
            $values: [
              {
                $type: SctDeclarationStatementSyntax,
                Type: {
                  Type: Predicate
                },
                Id: x,
                Expression: {
                  $type: SctPredicateExpressionSyntax,
                  SpeciesName: Citizen,
                  StateName: Child,
                  Fields: {
                    $type: IEnumerable<SctNamedArgumentSyntax>,
                    $values: [
                      {
                        Id: townId,
                        Expression: {
                          $type: SctLiteralExpressionSyntax<long>,
                          Value: 1,
                          Type: Int
                        }
                      }
                    ]
                  }
                }
              },
              {
                $type: SctIfStatementSyntax,
                Expression: {
                  $type: SctCallExpressionSyntax,
                  Target: duplicate,
                  Expressions: {
                    $type: IEnumerable<SctExpressionSyntax>,
                    $values: [
                      {
                        $type: SctIdExpressionSyntax,
                        Id: x
                      }
                    ]
                  }
                },
                Then: {
                  Statements: {
                    $type: IEnumerable<SctStatementSyntax>,
                    $values: [
                      {
                        $type: SctCreateStatementSyntax,
                        Agent: {
                          SpeciesName: Exiter,
                          StateName: Exiting,
                          Fields: {
                            $type: IEnumerable<SctNamedArgumentSyntax>,
                            $values: []
                          }
                        }
                      }
                    ]
                  }
                },
                Else: null
              }
            ]
          }
        }
      }
    ]
  },
  Species: {
    $type: IEnumerable<SctSpeciesSyntax>,
    $values: [
      {
        Id: Citizen,
        Parameters: {
          $type: IEnumerable<SctParameterSyntax>,
          $values: [
            {
              Type: {
                Type: Int
              },
              Id: townId
            }
          ]
        },
        Decorators: {
          $type: IEnumerable<SctDecoratorSyntax>,
          $values: []
        },
        States: {
          $type: IEnumerable<SctStateSyntax>,
          $values: [
            {
              Id: Child,
              Decorations: null,
              Block: {
                Statements: {
                  $type: IEnumerable<SctStatementSyntax>,
                  $values: [
                    {
                      $type: SctEnterStatementSyntax,
                      Id: Adult
                    }
                  ]
                }
              }
            },
            {
              Id: Adult,
              Decorations: null,
              Block: {
                Statements: {
                  $type: IEnumerable<SctStatementSyntax>,
                  $values: [
                    {
                      $type: SctEnterStatementSyntax,
                      Id: Adult
                    }
                  ]
                }
              }
            }
          ]
        },
        Functions: {
          $type: IEnumerable<SctFunctionSyntax>,
          $values: []
        }
      },
      {
        Id: Exiter,
        Parameters: {
          $type: IEnumerable<SctParameterSyntax>,
          $values: []
        },
        Decorators: {
          $type: IEnumerable<SctDecoratorSyntax>,
          $values: []
        },
        States: {
          $type: IEnumerable<SctStateSyntax>,
          $values: [
            {
              Id: Exiting,
              Decorations: null,
              Block: {
                Statements: {
                  $type: IEnumerable<SctStatementSyntax>,
                  $values: [
                    {
                      $type: SctExitStatementSyntax
                    }
                  ]
                }
              }
            }
          ]
        },
        Functions: {
          $type: IEnumerable<SctFunctionSyntax>,
          $values: []
        }
      }
    ]
  }
}