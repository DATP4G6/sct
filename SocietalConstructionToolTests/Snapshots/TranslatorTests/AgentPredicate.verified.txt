namespace MyNamespace
{
    using Sct.Runtime;

    public class GlobalClass
    {
        public static void __sct_f(IRuntimeContext ctx)
        {
            __sct_exists(ctx, new QueryPredicate("__sct_Foo", "__sct_Bar", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>("__sct_a", 2), new KeyValuePair<String, dynamic>("__sct_b", 3))));
            __sct_exists(ctx, new QueryPredicate("__sct_Foo", "__sct_Bar", new Dictionary<String, dynamic>()));
            __sct_exists(ctx, new QueryPredicate("__sct_Foo", null, new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>("__sct_a", 3))));
            __sct_exists(ctx, new QueryPredicate("__sct_Foo", null, new Dictionary<String, dynamic>()));
        }

        public class __sct_Foo : BaseAgent
        {
            private int __sct_a { get => Fields["__sct_a"]; set => Fields["__sct_a"] = value; }
            private int __sct_b { get => Fields["__sct_b"]; set => Fields["__sct_b"] = value; }

            public __sct_Foo(String state, IDictionary<String, dynamic> fields) : base(state, fields)
            {
            }

            private bool __sct_Bar(IRuntimeContext ctx)
            {
                return false;
            }

            public override BaseAgent Clone()
            {
                return new __sct_Foo(State, Fields);
            }

            public override void Update(IRuntimeContext ctx)
            {
                State switch
                {
                    "__sct_Bar" => __sct_Bar(ctx)};
            }
        }

        public static void Main(String[] args)
        {
            Runtime runtime = new Runtime();
            RuntimeContext ctx = RuntimeContextFactory.CreateFromArgs(args);
            __sct_Setup(ctx);
            runtime.Run(ctx);
        }
    }
}