namespace SctGenerated
{
    using Sct.Runtime;
    using System;
    using System.Collections.Generic;

    public class GlobalClass
    {
        public static void __sct_Setup(IRuntimeContext ctx)
        {
            QueryPredicate __sct_x = new QueryPredicate("__sct_Citizen", "__sct_Child", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { new KeyValuePair<String, dynamic>("__sct_townId", 1) }));
            if ((__sct_duplicate(ctx, __sct_x)) != 0)
            {
                ctx.ExitRuntime();
                return true;
            }
        }

        public static long __sct_duplicate(IRuntimeContext ctx, Predicate __sct_p)
        {
            if ((((ctx.QueryHandler.Count(ctx, __sct_p) > 1) ? 1 : 0)) != 0)
            {
                return 1;
            }

            return 0;
        }

        public class __sct_Citizen : BaseAgent
        {
            private int __sct_townId { get => Fields["__sct_townId"]; set => Fields["__sct_townId"] = value; }

            public __sct_Citizen(String state, IDictionary<String, dynamic> fields) : base(state, fields)
            {
            }

            private bool __sct_Child(IRuntimeContext ctx)
            {
                Enter(ctx, "__sct_Adult");
                return true;
                return false;
            }

            private bool __sct_Adult(IRuntimeContext ctx)
            {
                Enter(ctx, "__sct_Adult");
                return true;
                return false;
            }

            public override void Update(IRuntimeContext ctx)
            {
                _ = State switch
                {
                    "__sct_Child" => __sct_Child(ctx),
                    "__sct_Adult" => __sct_Adult(ctx)};
            }
        }

        public static void RunSimulation(IRuntimeContext ctx)
        {
            Runtime runtime = new Runtime();
            __sct_Setup(ctx);
            runtime.Run(ctx);
        }
    }
}