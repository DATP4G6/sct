namespace SctGenerated
{
    using Sct.Runtime;
    using System;
    using System.Collections.Generic;

    public class GlobalClass : BaseGlobalClass
    {
        public static void __sct_f(IRuntimeContext ctx)
        {
            ctx.QueryHandler.Exists(ctx, new QueryPredicate("__sct_Foo", "__sct_Bar", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { })));
            ctx.QueryHandler.Count(ctx, new QueryPredicate("__sct_Foo", "__sct_Bar", new Dictionary<String, dynamic>(new KeyValuePair<String, dynamic>[] { })));
            Rand(ctx);
            Seed(ctx, 123);
        }

        public class __sct_Foo : BaseAgent
        {
            public __sct_Foo(String state, IDictionary<String, dynamic> fields, int seed) : base(state, fields, seed)
            {
            }

            private bool __sct_Bar(IRuntimeContext ctx)
            {
                return false;
            }

            public override void Update(IRuntimeContext ctx)
            {
                _ = State switch
                {
                    "__sct_Bar" => __sct_Bar(ctx)};
            }
        }

        public static void RunSimulation(IRuntimeContext ctx)
        {
            Runtime runtime = new Runtime();
            __sct_Setup(ctx);
            runtime.Run(ctx);
        }
    }
}