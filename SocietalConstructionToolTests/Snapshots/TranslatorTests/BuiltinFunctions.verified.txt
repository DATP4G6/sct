namespace MyNamespace
{
    using Sct.Runtime;

    public class GlobalClass
    {
        public static void __sct_f(IRuntimeContext ctx)
        {
            __sct_exists(ctx, new QueryPredicate("__sct_Foo", "__sct_Bar", new Dictionary()));
            __sct_count(ctx, new QueryPredicate("__sct_Foo", "__sct_Bar", new Dictionary()));
            __sct_rand(ctx);
            __sct_seed(ctx, 123);
        }

        public class __sct_Foo : BaseAgent
        {
            public __sct_Foo(string state, IDictionary<string, dynamic> fields) : base(state, fields)
            {
            }

            private bool __sct_Bar(IRuntimeContext ctx)
            {
                return false;
            }

            public override BaseAgent Clone()
            {
                return new __sct_Foo(State, Fields);
            }

            public override void Update(IRuntimeContext ctx)
            {
                State switch
                {
                    "__sct_Bar" => __sct_Bar(ctx)};
            }
        }

        public static void Main(string[] args)
        {
            Runtime runtime = new Runtime();
            RuntimeContext ctx = RuntimeContextFactory.CreateFromArgs(args);
            __sct_Setup(ctx);
            runtime.Run(ctx);
        }
    }
}