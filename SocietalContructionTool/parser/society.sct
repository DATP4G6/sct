agent Town(int id, int space) {

    // Define a local function on the Town agent that returns an int
    // Note that these functions are non-static
    function countCitizens() -> int {
        // Return the number of Citizens in any state, where the field `townId` is equal to `id`
        return count(Citizen::?(townId: id));
    }

    state Stable {
        int population = countCitizens();
        if (population > space) {
            // Change the state of the Town to Critical. This means that the next tick, the `state Critical` block will be executed
            enter Critical;
        }
        
        // If no enter keyword is executed during a tick, the entity will simply stay in the same state.
    }

    state Critical {
        int population = countCitizens();
        if (population < space * 0.6) {
            enter Stable;
        }

        // If the population reaches zero, terminate the simulation
        if (population == 0) {
            quit();
        }
    }
}

agent Citizen(int townId) {

    decorator randomDeath {
        if (rand() < 0.005) {
                destroy;
        }
    }

    @randomDeath
    state Child {
        // If a child lives in a Town in the Critical state, it has a 2% chance to die
        // Note that since the `space` field on Town is omitted, it can be any value and still match
        if (exists(Town::Critical(id: townId))) {
            if (rand() < 0.02) {
                destroy;
            }
        }

        if ((int) rand() < 0.05) {
            enter Adult;
        }
    }
    
    @randomDeath
    state Adult {
        if (rand() < 0.05) {
            create Citizen::Child(townId: townId);
        }

        if (rand() < 0.01) {
            destroy;
        }
    }
}

// This function is run before the simulation starts
// After this function returns, the simulation begins
// While the simulation is running, the code in the state block for the entities current state will run
function Setup() -> void {
    // Create a town in the state growing with the id of 1 and space for 50 people
    create Town::Growing(id: 1, space: 50);

    int i = 0;
    // Create 20 children
    // These children are related to the town by having the `townId` field
    while (i < 20) {
        create Citizen::Child(townId: 1);
        i = i + 1;
    }
    seed(123);
}
