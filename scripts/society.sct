species Town(int id, int space) {
    state Stable {
        int population = count(Citizen::?(townId: id));
        if (population > space) {
            enter Critical;
        }
        enter Stable;
    }

    state Critical {
        int population = count(Citizen::?(townId: id));
        if (population < space * 0.6) {
            enter Stable;
        }
        enter Critical;
    }
}

function setup() -> void {
    create Town::Stable(id: 1, space: 50);

    int i = 0;
    while (i < 20) {
        create Citizen::Child(townId: 1);
        i = i + 1;
    }
    seed(123);
    ExitWhenNoLongerExists(Citizen::?());
    ExitAfterTicks(200);
}

species Citizen(int townId) {
    decorator randomDeath {
        if (rand() < 0.005) {
                destroy;
        }
    }

    @randomDeath
    state Child {
        if (exists(Town::Critical(id: townId))) {
            if (rand() < 0.02) {
                destroy;
            }
        }
        if (rand() < 0.05) {
            enter Adult;
        }
        enter Child;
    }

    @randomDeath
    state Adult {
        if (rand() < 0.05) {
            create Citizen::Child(townId: townId);
        }
        if (rand() < 0.01) {
            destroy;
        }
        enter Adult;
    }
}
